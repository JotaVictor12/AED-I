#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void insertion_sort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

int main() {
    int arr[5000];
    int i, n = 5000;
    clock_t start, end;
    double cpu_time_used;

    // preenche o vetor com valores aleatórios
    srand(time(NULL));
    for (i = 0; i < n; i++) {
        arr[i] = rand() % 100;
    }

    // mostra o vetor desordenado
    printf("Vetor desordenado: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // ordena o vetor e mede o tempo de execução
    start = clock();
    insertion_sort(arr, n);
    end = clock();

    // mostra o vetor ordenado
    printf("Vetor ordenado: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // mostra o tempo de execução em milissegundos
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC * 1000;
    printf("Tempo de execucao: %f ms\n", cpu_time_used);

    return 0;
}





