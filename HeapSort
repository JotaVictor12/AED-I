#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void heapify(int arr[], int n, int i) {
    int largest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;

    if (l < n && arr[l] > arr[largest])
        largest = l;

    if (r < n && arr[r] > arr[largest])
        largest = r;

    if (largest != i) {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;

        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    for (int i = n - 1; i >= 0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        heapify(arr, i, 0);
    }
}

int main() {
    int tam = 5000;
    int vetor[tam];

    // preenche o vetor com valores aleatórios
    srand(time(NULL));
    for (int i = 0; i < tam; i++)
        vetor[i] = rand() % 10000;

    // imprime o vetor antes de ordenar
    printf("Vetor antes da ordenação:\n");
    for (int i = 0; i < tam; i++)
        printf("%d ", vetor[i]);

    clock_t inicio = clock();

    // ordena o vetor usando HeapSort
    heapSort(vetor, tam);

    clock_t fim = clock();
    double tempo_execucao = (double)(fim - inicio) * 1000 / CLOCKS_PER_SEC;

    // imprime o vetor ordenado e o tempo de execução
    printf("\n\nVetor após a ordenação:\n");
    for (int i = 0; i < tam; i++)
        printf("%d ", vetor[i]);
    printf("\n\nTempo de execução: %.2f ms", tempo_execucao);

    return 0;
}
