#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void merge(int *vetor, int comeco, int meio, int fim) {
    int *temp, p1, p2, tamanho, i, j, k;

    int fim1 = 0, fim2 = 0;
    tamanho = fim - comeco + 1;
    p1 = comeco;
    p2 = meio + 1;
    temp = (int*) malloc(tamanho*sizeof(int));
    if(temp != NULL) {
        for(i = 0; i < tamanho; i++) {
            if(!fim1 && !fim2) {
                if(vetor[p1] < vetor[p2])
                    temp[i] = vetor[p1++];
                else
                    temp[i] = vetor[p2++];

                if(p1 > meio) fim1 = 1;
                if(p2 > fim) fim2 = 1;
            } else {
                if(!fim1)
                    temp[i] = vetor[p1++];
                else
                    temp[i] = vetor[p2++];
            }
        }
        for(j = 0, k = comeco; j < tamanho; j++, k++)
            vetor[k] = temp[j];
    }
    free(temp);
}

void mergeSort(int *vetor, int comeco, int fim) {
    int meio;
    if(comeco < fim) {
        meio = (fim + comeco) / 2;
        mergeSort(vetor, comeco, meio);
        mergeSort(vetor, meio + 1, fim);
        merge(vetor, comeco, meio, fim);
    }
}

int main() {
    int vetor[5000];
    int i;
    clock_t start, end;
    double elapsed_time;

    // Preenchimento do vetor com valores aleatórios
    srand(time(NULL));
    for(i = 0; i < 5000; i++) {
        vetor[i] = rand() % 5000;
    }

    printf("Vetor antes de ordenar:\n");
    for(i = 0; i < 5000; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n");

    // Ordenação com MergeSort
    start = clock();
    mergeSort(vetor, 0, 4999);
    end = clock();

    printf("Vetor ordenado:\n");
    for(i = 0; i < 5000; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n");

    // Cálculo do tempo de execução em milissegundos
    elapsed_time = (double)(end - start) / CLOCKS_PER_SEC * 1000;
    printf("Tempo de execucao: %.2f ms\n", elapsed_time);

    return 0;
}
